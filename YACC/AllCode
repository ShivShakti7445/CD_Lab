
                                                   *** 0 and 1 *******
%{
#include <stdio.h>
#include <stdlib.h>
int yylex();
void yyerror(const char *s);
%}

%token ZERO ONE OTHER
%start S

%%
S: ZERO Rest ZERO   { printf("Valid string: Starts with 0 and ends with 0\n"); }
 | ONE Rest ONE     { printf("Valid string: Starts with 1 and ends with 1\n"); }
 ;

Rest: 
    | Rest ZERO
    | Rest ONE
    | Rest OTHER
    ;
%%

int yylex() {
    char c = getchar();
    switch(c) {
        case '0': return ZERO;
        case '1': return ONE;
        case '\n': return 0;  
        default: return OTHER;
    }
}

void yyerror(const char *s) {
    fprintf(stderr, "%s\n", s);
}

int main() {
    printf("Enter a string (should start and end with 0 or 1):\n");
    yyparse();
    return 0;
}


__________________________________________________________________________________________________________________________________________________________________________________
                                                      
                                                                  *** arithmetic expression YACC***

%{
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int yylex();
void yyerror(const char *s);
%}

%token NUMBER
%left '+' '-'
%left '*' '/'
%right UMINUS

%%
statement: expression                     { printf("Result: %d\n", $1); }
         ;

expression: expression '+' expression     { $$ = $1 + $3; }
          | expression '-' expression     { $$ = $1 - $3; }
          | expression '*' expression     { $$ = $1 * $3; }
          | expression '/' expression     { 
                if ($3 == 0) {
                    yyerror("Division by zero");
                    YYABORT;
                }
                $$ = $1 / $3; 
            }
          | '(' expression ')'            { $$ = $2; }
          | '-' expression %prec UMINUS   { $$ = -$2; }
          | NUMBER                        { $$ = $1; }
          ;
%%

int yylex() {
    int c;
    while ((c = getchar()) == ' ' || c == '\t');
    
    if (isdigit(c)) {
        ungetc(c, stdin);
        scanf("%d", &yylval);
        return NUMBER;
    }
    
    if (c == '\n')
        return 0;
        
    return c;
}

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter an arithmetic expression:\n");
    yyparse();
    return 0;
}



